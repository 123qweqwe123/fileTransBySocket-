/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bdcor.datserver.filetrans.avro.proto;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FileData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3423522868123444369L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FileData\",\"namespace\":\"com.bdcor.datserver.filetrans.avro.proto\",\"fields\":[{\"name\":\"paramsMap\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"fileBytes\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paramsMap;
  @Deprecated public java.nio.ByteBuffer fileBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FileData() {}

  /**
   * All-args constructor.
   * @param paramsMap The new value for paramsMap
   * @param fileBytes The new value for fileBytes
   */
  public FileData(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paramsMap, java.nio.ByteBuffer fileBytes) {
    this.paramsMap = paramsMap;
    this.fileBytes = fileBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paramsMap;
    case 1: return fileBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paramsMap = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 1: fileBytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'paramsMap' field.
   * @return The value of the 'paramsMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParamsMap() {
    return paramsMap;
  }

  /**
   * Sets the value of the 'paramsMap' field.
   * @param value the value to set.
   */
  public void setParamsMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.paramsMap = value;
  }

  /**
   * Gets the value of the 'fileBytes' field.
   * @return The value of the 'fileBytes' field.
   */
  public java.nio.ByteBuffer getFileBytes() {
    return fileBytes;
  }

  /**
   * Sets the value of the 'fileBytes' field.
   * @param value the value to set.
   */
  public void setFileBytes(java.nio.ByteBuffer value) {
    this.fileBytes = value;
  }

  /**
   * Creates a new FileData RecordBuilder.
   * @return A new FileData RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.FileData.Builder newBuilder() {
    return new com.bdcor.datserver.filetrans.avro.proto.FileData.Builder();
  }

  /**
   * Creates a new FileData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FileData RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.FileData.Builder newBuilder(com.bdcor.datserver.filetrans.avro.proto.FileData.Builder other) {
    return new com.bdcor.datserver.filetrans.avro.proto.FileData.Builder(other);
  }

  /**
   * Creates a new FileData RecordBuilder by copying an existing FileData instance.
   * @param other The existing instance to copy.
   * @return A new FileData RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.FileData.Builder newBuilder(com.bdcor.datserver.filetrans.avro.proto.FileData other) {
    return new com.bdcor.datserver.filetrans.avro.proto.FileData.Builder(other);
  }

  /**
   * RecordBuilder for FileData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FileData>
    implements org.apache.avro.data.RecordBuilder<FileData> {

    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> paramsMap;
    private java.nio.ByteBuffer fileBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bdcor.datserver.filetrans.avro.proto.FileData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paramsMap)) {
        this.paramsMap = data().deepCopy(fields()[0].schema(), other.paramsMap);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileBytes)) {
        this.fileBytes = data().deepCopy(fields()[1].schema(), other.fileBytes);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FileData instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bdcor.datserver.filetrans.avro.proto.FileData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.paramsMap)) {
        this.paramsMap = data().deepCopy(fields()[0].schema(), other.paramsMap);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fileBytes)) {
        this.fileBytes = data().deepCopy(fields()[1].schema(), other.fileBytes);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'paramsMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParamsMap() {
      return paramsMap;
    }

    /**
      * Sets the value of the 'paramsMap' field.
      * @param value The value of 'paramsMap'.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.FileData.Builder setParamsMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.paramsMap = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paramsMap' field has been set.
      * @return True if the 'paramsMap' field has been set, false otherwise.
      */
    public boolean hasParamsMap() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paramsMap' field.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.FileData.Builder clearParamsMap() {
      paramsMap = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fileBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFileBytes() {
      return fileBytes;
    }

    /**
      * Sets the value of the 'fileBytes' field.
      * @param value The value of 'fileBytes'.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.FileData.Builder setFileBytes(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.fileBytes = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fileBytes' field has been set.
      * @return True if the 'fileBytes' field has been set, false otherwise.
      */
    public boolean hasFileBytes() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fileBytes' field.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.FileData.Builder clearFileBytes() {
      fileBytes = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public FileData build() {
      try {
        FileData record = new FileData();
        record.paramsMap = fieldSetFlags()[0] ? this.paramsMap : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[0]);
        record.fileBytes = fieldSetFlags()[1] ? this.fileBytes : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
