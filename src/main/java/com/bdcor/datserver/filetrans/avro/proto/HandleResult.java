/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bdcor.datserver.filetrans.avro.proto;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HandleResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3426194729564587922L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HandleResult\",\"namespace\":\"com.bdcor.datserver.filetrans.avro.proto\",\"fields\":[{\"name\":\"resultType\",\"type\":\"string\"},{\"name\":\"resultStr\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence resultType;
  @Deprecated public java.lang.CharSequence resultStr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HandleResult() {}

  /**
   * All-args constructor.
   * @param resultType The new value for resultType
   * @param resultStr The new value for resultStr
   */
  public HandleResult(java.lang.CharSequence resultType, java.lang.CharSequence resultStr) {
    this.resultType = resultType;
    this.resultStr = resultStr;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resultType;
    case 1: return resultStr;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resultType = (java.lang.CharSequence)value$; break;
    case 1: resultStr = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'resultType' field.
   * @return The value of the 'resultType' field.
   */
  public java.lang.CharSequence getResultType() {
    return resultType;
  }

  /**
   * Sets the value of the 'resultType' field.
   * @param value the value to set.
   */
  public void setResultType(java.lang.CharSequence value) {
    this.resultType = value;
  }

  /**
   * Gets the value of the 'resultStr' field.
   * @return The value of the 'resultStr' field.
   */
  public java.lang.CharSequence getResultStr() {
    return resultStr;
  }

  /**
   * Sets the value of the 'resultStr' field.
   * @param value the value to set.
   */
  public void setResultStr(java.lang.CharSequence value) {
    this.resultStr = value;
  }

  /**
   * Creates a new HandleResult RecordBuilder.
   * @return A new HandleResult RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder newBuilder() {
    return new com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder();
  }

  /**
   * Creates a new HandleResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HandleResult RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder newBuilder(com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder other) {
    return new com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder(other);
  }

  /**
   * Creates a new HandleResult RecordBuilder by copying an existing HandleResult instance.
   * @param other The existing instance to copy.
   * @return A new HandleResult RecordBuilder
   */
  public static com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder newBuilder(com.bdcor.datserver.filetrans.avro.proto.HandleResult other) {
    return new com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder(other);
  }

  /**
   * RecordBuilder for HandleResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HandleResult>
    implements org.apache.avro.data.RecordBuilder<HandleResult> {

    private java.lang.CharSequence resultType;
    private java.lang.CharSequence resultStr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resultType)) {
        this.resultType = data().deepCopy(fields()[0].schema(), other.resultType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resultStr)) {
        this.resultStr = data().deepCopy(fields()[1].schema(), other.resultStr);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HandleResult instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bdcor.datserver.filetrans.avro.proto.HandleResult other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.resultType)) {
        this.resultType = data().deepCopy(fields()[0].schema(), other.resultType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.resultStr)) {
        this.resultStr = data().deepCopy(fields()[1].schema(), other.resultStr);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'resultType' field.
      * @return The value.
      */
    public java.lang.CharSequence getResultType() {
      return resultType;
    }

    /**
      * Sets the value of the 'resultType' field.
      * @param value The value of 'resultType'.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder setResultType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.resultType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resultType' field has been set.
      * @return True if the 'resultType' field has been set, false otherwise.
      */
    public boolean hasResultType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resultType' field.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder clearResultType() {
      resultType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'resultStr' field.
      * @return The value.
      */
    public java.lang.CharSequence getResultStr() {
      return resultStr;
    }

    /**
      * Sets the value of the 'resultStr' field.
      * @param value The value of 'resultStr'.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder setResultStr(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.resultStr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'resultStr' field has been set.
      * @return True if the 'resultStr' field has been set, false otherwise.
      */
    public boolean hasResultStr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'resultStr' field.
      * @return This builder.
      */
    public com.bdcor.datserver.filetrans.avro.proto.HandleResult.Builder clearResultStr() {
      resultStr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public HandleResult build() {
      try {
        HandleResult record = new HandleResult();
        record.resultType = fieldSetFlags()[0] ? this.resultType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.resultStr = fieldSetFlags()[1] ? this.resultStr : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
